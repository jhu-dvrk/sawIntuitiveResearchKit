// -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab:

inline-header {

    #include <sawIntuitiveResearchKit/mtsIntuitiveResearchKit.h>

}

class {
    name arm_configuration_t;
    namespace dvrk;
    attribute CISST_EXPORT;

    enum {
        name generation_t;
        enum-value {
            name GENERATION_UNDEFINED;
            description Undefined;
            value 0;
        }
        enum-value {
            name Classic;
            description Classic;
        }
        enum-value {
            name Si;
            description Si;
        }
    }

    member {
        name _generation;
        type dvrk::arm_configuration_t::generation_t;
        visibility private;
        accessors none;
    }

    member {
        name kinematic;
        type std::string;
        visibility public;
    }

    member {
        name mounting_pitch;
        type double;
        visibility public;
        default 0.0;
    }

    inline-header {

    public:

        inline void set_generation(const dvrk::arm_configuration_t::generation_t generation) {
            m_generation = generation;
        }

        inline dvrk::arm_configuration_t::generation_t generation(void) const {
            if (m_generation == dvrk::arm_configuration_t::GENERATION_UNDEFINED) {
                CMN_LOG_INIT_ERROR << "dvrk::arm_configuration_t::generation: trying to access generation before it is set"
                                   << std::endl;
                exit(EXIT_FAILURE);
            }
            return m_generation;
        }
    }
}


class {
    name arm_proxy_configuration_t;
    namespace dvrk;
    attribute CISST_EXPORT;

    enum {
        name arm_type_t;
        enum-value {
            name ARM_UNDEFINED;
            description Undefined;
            value 0;
        }
        // native classes
        enum-value {
            name ECM;
            description Native ECM;
        }
        enum-value {
            name MTM;
            description Native MTM;
        }
        enum-value {
            name PSM;
            description Native PSM;
        }
        // derived classes
        enum-value {
            name ECM_DERIVED;
            description ECM derived from native ECM;
        }
        enum-value {
            name MTM_DERIVED;
            description MTM derived from native MTM;
        }
        enum-value {
            name PSM_DERIVED;
            description PSM derived from native PSM;
        }
        // generic classes
        enum-value {
            name ECM_GENERIC;
            description Generic ECM;
        }
        enum-value {
            name MTM_GENERIC;
            description Generic MTM;
        }
        enum-value {
            name PSM_GENERIC;
            description Generic PSM;
        }
        // SUJ
        enum-value {
            name SUJ_Classic;
            description SUJ Classic;
        }
        enum-value {
            name SUJ_Si;
            description SUJ Si;
        }
        enum-value {
            name SUJ_Fixed;
            description SUJ Fixed;
        }
        // Classic focus controller
        enum-value {
            name FOCUS_CONTROLLER;
            description Focus Controller (not implemented yet);
        }
    }

    enum {
        name simulation_t;
        prefix SIMULATION_;
        enum-value {
            name NONE;
            description Not simulated;
            value 0;
        }
        enum-value {
            name KINEMATIC;
            description Kinematic simulation (RViz);
        }
        enum-value {
            name DYNAMIC;
            description Dynamic simulation (AMBF, Gazebo...);
        }
    }

    member {
        name name;
        type std::string;
        visibility public;
    }

    member {
        name type;
        type dvrk::arm_proxy_configuration_t::arm_type_t;
        visibility public;
    }

    member {
        name serial;
        type std::string;
        visibility public;
        default "";
    }

    member {
        name simulation;
        type dvrk::arm_proxy_configuration_t::simulation_t;
        visibility public;
        default dvrk::arm_proxy_configuration_t::SIMULATION_NONE;
    }

    member {
        name arm;
        type std::string;
        visibility public;
        default "";
    }

    member {
        name pid;
        type std::string;
        visibility public;
        default "";
    }

    member {
        name io;
        type std::string;
        visibility public;
        default "";
    }

    member {
        name period;
        type double;
        visibility public;
        default mtsIntuitiveResearchKit::ArmPeriod;
    }

    member {
        name pid_period;
        type double;
        visibility public;
        default 0.0;
        description Period to use for the PID component, 0.0 is used to run the PID using the IO thread;
    }

    member {
        name skip_ros_bridge;
        type bool;
        visibility public;
        default false;
    }

    member {
        name component;
        type std::string;
        visibility public;
        default "";
        description Name of component to use for generic or derived classes;
    }

    member {
        name interface;
        type std::string;
        visibility public;
        default "";
        description Name of interface to use for generic or derived classes;
    }


    inline-header {

    public:

        inline bool simulated(void) const {
            return this->simulation != SIMULATION_NONE;
        }

        inline bool generic(void) const {
            switch (this->type) {
            case MTM_GENERIC:
            case PSM_GENERIC:
            case ECM_GENERIC:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool psm(void) const {
            switch (this->type) {
            case PSM:
            case PSM_DERIVED:
            case PSM_GENERIC:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool mtm(void) const {
            switch (this->type) {
            case MTM:
            case MTM_DERIVED:
            case MTM_GENERIC:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool ecm(void) const {
            switch (this->type) {
            case ECM:
            case ECM_DERIVED:
            case ECM_GENERIC:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool suj(void) const {
            switch (this->type) {
            case SUJ_Classic:
            case SUJ_Si:
            case SUJ_Fixed:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool native_or_derived(void) const {
            switch (this->type) {
	        case MTM:
            case PSM:
            case ECM:
            case MTM_DERIVED:
            case PSM_DERIVED:
            case ECM_DERIVED:
            case SUJ_Classic:
            case SUJ_Si:
            case SUJ_Fixed:
            case FOCUS_CONTROLLER:
                return true;
                break;
            default:
                return false;
                break;
            }
            return false;
        }

        inline bool native_or_derived_mtm(void) const {
            return native_or_derived() && mtm();
        }

        inline bool native_or_derived_psm(void) const {
            return native_or_derived() && psm();
        }

        inline bool native_or_derived_ecm(void) const {
            return native_or_derived() && ecm();
        }

        inline bool expects_PID(void) const {
            return (native_or_derived()
                    && !suj());
        }

        inline bool expects_IO(void) const {
            return (native_or_derived()
                    && (this->type != SUJ_Si)
                    && (this->type != SUJ_Fixed)
                    && (this->simulation == SIMULATION_NONE));
        }
    }
}

class {
    name console_configuration_t;
    namespace dvrk;
    attribute CISST_EXPORT;

    member {
        name arms;
        type std::vector<dvrk::arm_proxy_configuration_t>;
        visibility public;
    }
}
